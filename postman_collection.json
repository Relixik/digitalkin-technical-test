{
  "info": {
    "name": "DigitalKin API",
    "description": "Collection Postman pour tester l'API DigitalKin",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "agentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversationId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Agents",
      "item": [
        {
          "name": "Créer un agent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set('agentId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Response has correct name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql('Assistant Echo');",
                  "});",
                  "",
                  "pm.test(\"Response has correct type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.type).to.eql('echo');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Assistant Echo\",\n  \"type\": \"echo\",\n  \"description\": \"Un assistant qui fait écho des messages\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/agents",
              "host": ["{{baseUrl}}"],
              "path": ["agents"]
            }
          }
        },
        {
          "name": "Lister tous les agents",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Array contains at least one agent\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length).to.be.at.least(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/agents",
              "host": ["{{baseUrl}}"],
              "path": ["agents"]
            }
          }
        },
        {
          "name": "Récupérer un agent par ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    pm.expect(jsonData).to.have.property('updatedAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/agents/{{agentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["agents", "{{agentId}}"]
            }
          }
        },
        {
          "name": "Mettre à jour un agent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Name has been updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql('Assistant Prédéfini');",
                  "});",
                  "",
                  "pm.test(\"Type has been updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.type).to.eql('predefined');",
                  "});",
                  "",
                  "pm.test(\"Config has been set\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.config).to.have.property('predefinedResponse');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Assistant Prédéfini\",\n  \"type\": \"predefined\",\n  \"description\": \"Assistant avec réponse prédéfinie\",\n  \"config\": {\n    \"predefinedResponse\": \"Bonjour ! Je suis un assistant avec une réponse prédéfinie.\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/agents/{{agentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["agents", "{{agentId}}"]
            }
          }
        },
        {
          "name": "Créer un agent avec mots-clés",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.type).to.eql('keyword_based');",
                  "});",
                  "",
                  "pm.test(\"Response has keyword rules\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.config).to.have.property('keywordRules');",
                  "    pm.expect(jsonData.config.keywordRules).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Assistant Mots-clés\",\n  \"type\": \"keyword_based\",\n  \"description\": \"Assistant basé sur des mots-clés\",\n  \"config\": {\n    \"keywordRules\": [\n      {\n        \"keywords\": [\"bonjour\", \"salut\", \"hello\"],\n        \"response\": \"Bonjour ! Comment puis-je vous aider ?\",\n        \"priority\": 10\n      },\n      {\n        \"keywords\": [\"aide\", \"help\", \"assistance\"],\n        \"response\": \"Je suis là pour vous aider ! Posez-moi vos questions.\",\n        \"priority\": 5\n      },\n      {\n        \"keywords\": [\"au revoir\", \"bye\", \"goodbye\"],\n        \"response\": \"Au revoir ! À bientôt !\",\n        \"priority\": 10\n      }\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/agents",
              "host": ["{{baseUrl}}"],
              "path": ["agents"]
            }
          }
        },
        {
          "name": "Créer un agent OpenAI",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.type).to.eql('openai');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Assistant OpenAI\",\n  \"type\": \"openai\",\n  \"description\": \"Assistant utilisant l'API OpenAI\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/agents",
              "host": ["{{baseUrl}}"],
              "path": ["agents"]
            }
          }
        }
      ]
    },
    {
      "name": "Conversations",
      "item": [
        {
          "name": "Démarrer une conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has conversationId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('conversationId');",
                  "    pm.collectionVariables.set('conversationId', jsonData.conversationId);",
                  "});",
                  "",
                  "pm.test(\"Response has message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agentId\": \"{{agentId}}\",\n  \"message\": \"Bonjour, comment allez-vous ?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/conversations",
              "host": ["{{baseUrl}}"],
              "path": ["conversations"]
            }
          }
        },
        {
          "name": "Continuer une conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "});",
                  "",
                  "pm.test(\"ConversationId matches\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.conversationId).to.eql(pm.collectionVariables.get('conversationId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Pouvez-vous m'aider avec un problème technique ?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/conversations/{{conversationId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["conversations", "{{conversationId}}", "messages"]
            }
          }
        }
      ]
    },
    {
      "name": "Tests d'erreur",
      "item": [
        {
          "name": "Agent inexistant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.eql('Agent not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/agents/nonexistent",
              "host": ["{{baseUrl}}"],
              "path": ["agents", "nonexistent"]
            }
          }
        },
        {
          "name": "Validation échouée - Agent sans nom",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message contains validation info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('name');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Agent sans nom\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/agents",
              "host": ["{{baseUrl}}"],
              "path": ["agents"]
            }
          }
        }
      ]
    },
    {
      "name": "Nettoyage",
      "item": [
        {
          "name": "Supprimer l'agent de test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/agents/{{agentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["agents", "{{agentId}}"]
            }
          }
        }
      ]
    }
  ]
}